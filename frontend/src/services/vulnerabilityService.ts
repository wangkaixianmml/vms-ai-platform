import api from './api';

// 漏洞服务接口
export interface VulnerabilityService {
  // 获取所有漏洞
  getVulnerabilities(params?: { risk_level?: string; status?: string }): Promise<any>;
  
  // 获取单个漏洞详情
  getVulnerabilityById(id: number | string): Promise<any>;
  
  // 创建新漏洞
  createVulnerability(vulnerability: any): Promise<any>;
  
  // 更新漏洞
  updateVulnerability(id: number | string, vulnerability: any): Promise<any>;
  
  // 删除漏洞
  deleteVulnerability(id: number | string): Promise<any>;
}

// 漏洞服务实现
const vulnerabilityService: VulnerabilityService = {
  // 获取所有漏洞
  async getVulnerabilities(params = {}) {
    try {
      console.log('开始请求漏洞列表', {
        url: '/api/v1/vulnerabilities/',
        baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',
        params
      });
      
      // 添加超时处理
      const response = await api.get('/api/v1/vulnerabilities/', { 
        params,
        timeout: 30000 // 增加超时时间
      });
      
      console.log('获取漏洞列表成功:', response);
      return response.data;
    } catch (error) {
      // 详细记录错误
      console.error('获取漏洞列表失败, 详细错误:', {
        message: (error as Error).message,
        code: (error as any).code,
        response: (error as any).response,
        request: (error as any).request
      });
      throw error;
    }
  },
  
  // 获取单个漏洞详情
  async getVulnerabilityById(id) {
    try {
      const response = await api.get(`/api/v1/vulnerabilities/${id}`);
      return response.data;
    } catch (error) {
      console.error(`获取漏洞详情失败 (ID: ${id}):`, error);
      throw error;
    }
  },
  
  // 创建新漏洞
  async createVulnerability(vulnerability) {
    try {
      const response = await api.post('/api/v1/vulnerabilities/', vulnerability);
      return response.data;
    } catch (error) {
      console.error('创建漏洞失败:', error);
      throw error;
    }
  },
  
  // 更新漏洞
  async updateVulnerability(id, vulnerability) {
    try {
      const response = await api.put(`/api/v1/vulnerabilities/${id}`, vulnerability);
      return response.data;
    } catch (error) {
      console.error(`更新漏洞失败 (ID: ${id}):`, error);
      throw error;
    }
  },
  
  // 删除漏洞
  async deleteVulnerability(id) {
    try {
      const response = await api.delete(`/api/v1/vulnerabilities/${id}`);
      return response.data;
    } catch (error) {
      console.error(`删除漏洞失败 (ID: ${id}):`, error);
      throw error;
    }
  },
};

export default vulnerabilityService; 