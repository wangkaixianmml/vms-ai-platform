// 资产类型
export interface Asset {
  id: string;
  name: string;
  ip: string;
  type: string; // 服务器、应用等
  description?: string;
}

// 漏洞风险等级
export type RiskLevel = 'high' | 'medium' | 'low' | 'info';

// 漏洞状态
export type VulnerabilityStatus = 'open' | 'in_progress' | 'fixed' | 'closed' | 'false_positive';

// 漏洞类型
export interface Vulnerability {
  id: string;
  name: string;
  cve_id?: string; // CVE编号，可能没有
  description: string;
  risk_level: RiskLevel;
  status: VulnerabilityStatus;
  discovered_at: string; // ISO日期字符串
  updated_at: string; // ISO日期字符串
  affected_assets: Asset[];
  remediation_steps?: string; // 修复步骤
  technical_details?: string; // 技术细节
  
  // 新增字段
  vulnerability_type?: string; // 漏洞类型，如SQL注入、XSS、CSRF等
  vulnerability_url?: string; // 漏洞地址
  responsible_person?: string; // 漏洞负责人
  department?: string; // 漏洞归属部门
  first_found_date?: string; // 漏洞首次发现时间
  latest_found_date?: string; // 漏洞最近发现时间
  cvss_score?: number; // 漏洞CVSS评分
  vpr_score?: number; // 漏洞VPR评分
  priority?: string; // 漏洞优先级
  fix_time_hours?: number; // 漏洞修复时长
  
  // 详情展示字段
  impact_details?: string; // 漏洞危害
  reproduction_steps?: string; // 漏洞复现步骤
  affected_components?: string; // 漏洞影响组件
  impact_scope?: string; // 漏洞影响范围
  fix_impact?: string; // 漏洞修复影响
  references?: string; // 漏洞参考资料
}

// AI聊天消息
export interface Message {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: string;
}

// AI聊天上下文
export interface AIChatContextType {
  isOpen: boolean;
  messages: Message[];
  isLoading: boolean;
  contextData?: any;
  openChat: (contextData?: any) => void;
  closeChat: () => void;
  sendMessage: (content: string) => Promise<void>;
  clearMessages: () => void;
} 