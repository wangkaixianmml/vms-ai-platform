import React, { useEffect, useState } from 'react';
import { Table, Tag, Space, Button, Input, Select, Card, Typography, Modal, Form, message, DatePicker } from 'antd';
import { SearchOutlined, PlusOutlined, RobotOutlined } from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';
import AIChatTrigger from '../../components/ai/AIChatTrigger';
import vulnerabilityService from '../../services/vulnerabilityService';
import type { Dayjs } from 'dayjs';
import dayjs from 'dayjs';

const { Title } = Typography;
const { Option } = Select;
const { TextArea } = Input;
const { RangePicker } = DatePicker;

interface Asset {
  id: number;
  name: string;
  ip: string | null;
  type: string;
}

interface Vulnerability {
  id: number;
  name: string;
  cve_id: string | null;
  risk_level: string;
  description: string;
  affected_assets: Asset[];
  discovery_date: string;
  status: string;
  remediation_steps: string | null;
  vulnerability_type?: string;
  priority?: string;
  department?: string;
  responsible_person?: string;
  affected_components?: string;
  cvss_score?: number;
  first_found_date?: string;
  latest_found_date?: string;
  vpr_score?: number;
}

// 风险等级对应的颜色
const riskLevelColors: Record<string, string> = {
  '高': 'red',
  '中': 'orange',
  '低': 'green',
};

// 状态对应的颜色
const statusColors: Record<string, string> = {
  '待修复': 'red',
  '修复中': 'orange',
  '已修复': 'green',
  '已验证': 'blue',
};

const VulnerabilityList: React.FC = () => {
  const navigate = useNavigate();
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchText, setSearchText] = useState('');
  const [riskLevelFilter, setRiskLevelFilter] = useState<string>('');
  const [statusFilter, setStatusFilter] = useState<string>('');
  const [typeFilter, setTypeFilter] = useState<string>('');
  const [priorityFilter, setPriorityFilter] = useState<string>('');
  const [departmentFilter, setDepartmentFilter] = useState<string>('');
  const [responsiblePersonFilter, setResponsiblePersonFilter] = useState<string>('');
  const [vprMinFilter, setVprMinFilter] = useState<number | null>(null);
  const [vprMaxFilter, setVprMaxFilter] = useState<number | null>(null);
  const [firstFoundDateRange, setFirstFoundDateRange] = useState<[Dayjs | null, Dayjs | null] | null>(null);
  const [latestFoundDateRange, setLatestFoundDateRange] = useState<[Dayjs | null, Dayjs | null] | null>(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();
  const [submitLoading, setSubmitLoading] = useState(false);

  useEffect(() => {
    const fetchVulnerabilities = async () => {
      try {
        setLoading(true);
        // 构建请求参数
        const params: any = {};
        
        if (riskLevelFilter) {
          params.risk_level = riskLevelFilter;
        }
        
        if (statusFilter) {
          params.status = statusFilter;
        }
        
        if (typeFilter) {
          params.vulnerability_type = typeFilter;
        }
        
        if (priorityFilter) {
          params.priority = priorityFilter;
        }
        
        if (departmentFilter) {
          params.department = departmentFilter;
        }
        
        if (responsiblePersonFilter) {
          params.responsible_person = responsiblePersonFilter;
        }
        
        if (vprMinFilter !== null) {
          params.min_vpr = vprMinFilter;
        }
        
        if (vprMaxFilter !== null) {
          params.max_vpr = vprMaxFilter;
        }
        
        // 处理首次发现时间范围
        if (firstFoundDateRange && firstFoundDateRange[0] && firstFoundDateRange[1]) {
          params.first_found_from = firstFoundDateRange[0].format('YYYY-MM-DD HH:mm:ss');
          params.first_found_to = firstFoundDateRange[1].format('YYYY-MM-DD HH:mm:ss');
        }
        
        // 处理最近发现时间范围
        if (latestFoundDateRange && latestFoundDateRange[0] && latestFoundDateRange[1]) {
          params.latest_found_from = latestFoundDateRange[0].format('YYYY-MM-DD HH:mm:ss');
          params.latest_found_to = latestFoundDateRange[1].format('YYYY-MM-DD HH:mm:ss');
        }
        
        console.log('正在获取漏洞列表，参数:', params);
        
        const data = await vulnerabilityService.getVulnerabilities(params);
        console.log('获取到漏洞数据:', data);
        
        if (!Array.isArray(data)) {
          console.error('返回的数据不是数组:', data);
          throw new Error('API返回的数据格式不正确');
        }
        
        setVulnerabilities(data);
      } catch (error) {
        console.error('获取漏洞列表出错:', error);
        message.error('获取漏洞列表失败，请检查网络连接或刷新页面');
        // 确保即使失败也清空之前的数据，以防止显示过期数据
        setVulnerabilities([]);
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilities();
  }, [riskLevelFilter, statusFilter, typeFilter, priorityFilter, departmentFilter, responsiblePersonFilter, vprMinFilter, vprMaxFilter, firstFoundDateRange, latestFoundDateRange]);

  // 导航到漏洞详情页
  const goToDetail = (id: number) => {
    navigate(`/vulnerabilities/${id}`);
  };

  // 过滤显示的漏洞
  const filteredVulnerabilities = vulnerabilities.filter(v => 
    v.name.toLowerCase().includes(searchText.toLowerCase()) ||
    (v.cve_id && v.cve_id.toLowerCase().includes(searchText.toLowerCase())) ||
    v.description.toLowerCase().includes(searchText.toLowerCase()) ||
    (v.vulnerability_type && v.vulnerability_type.toLowerCase().includes(searchText.toLowerCase())) ||
    (v.responsible_person && v.responsible_person.toLowerCase().includes(searchText.toLowerCase())) ||
    (v.department && v.department.toLowerCase().includes(searchText.toLowerCase())) ||
    (v.affected_components && v.affected_components.toLowerCase().includes(searchText.toLowerCase()))
  );

  // 格式化日期显示
  const formatDate = (dateStr: string | undefined) => {
    if (!dateStr) return '未知';
    try {
      // 尝试解析为日期时间并格式化
      return new Date(dateStr).toLocaleString();
    } catch (e) {
      console.error('日期解析错误:', e);
      return '日期格式错误';
    }
  };

  // 添加漏洞
  const handleAddVulnerability = () => {
    setIsModalVisible(true);
  };

  // 处理VPR评分范围变更
  const handleVprMinChange = (value: string) => {
    setVprMinFilter(value ? parseFloat(value) : null);
  };

  const handleVprMaxChange = (value: string) => {
    setVprMaxFilter(value ? parseFloat(value) : null);
  };

  // 处理表单提交
  const handleSubmit = async (values: any) => {
    try {
      setSubmitLoading(true);
      console.log('提交表单数据:', values);
      
      const data = await vulnerabilityService.createVulnerability(values);
      
      // 添加新漏洞到列表
      setVulnerabilities(prev => [...prev, data]);
      
      // 关闭模态窗口并重置表单
      setIsModalVisible(false);
      form.resetFields();
      
      message.success('漏洞添加成功！');
    } catch (error) {
      console.error('创建漏洞出错:', error);
      message.error('漏洞添加失败，请稍后重试');
    } finally {
      setSubmitLoading(false);
    }
  };

  // 取消添加
  const handleCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
  };

  // 处理时间范围选择
  const handleFirstFoundDateChange = (dates: any) => {
    setFirstFoundDateRange(dates ? dates : null);
  };

  const handleLatestFoundDateChange = (dates: any) => {
    setLatestFoundDateRange(dates ? dates : null);
  };

  const columns = [
    {
      title: 'ID',
      dataIndex: 'id',
      key: 'id',
      width: 70,
    },
    {
      title: '名称',
      dataIndex: 'name',
      key: 'name',
      render: (text: string, record: Vulnerability) => (
        <a onClick={() => goToDetail(record.id)}>{text}</a>
      ),
    },
    {
      title: 'CVE ID',
      dataIndex: 'cve_id',
      key: 'cve_id',
      render: (text: string | null) => text || '无',
    },
    {
      title: '类型',
      dataIndex: 'vulnerability_type',
      key: 'vulnerability_type',
      render: (text: string | null) => text || '未分类',
    },
    {
      title: '风险等级',
      dataIndex: 'risk_level',
      key: 'risk_level',
      render: (text: string) => (
        <Tag color={riskLevelColors[text] || 'default'}>{text}</Tag>
      ),
    },
    {
      title: '优先级',
      dataIndex: 'priority',
      key: 'priority',
      render: (text: string | null) => text ? (
        <Tag color={riskLevelColors[text] || 'default'}>{text}</Tag>
      ) : '未设置',
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      render: (text: string) => (
        <Tag color={statusColors[text] || 'default'}>{text}</Tag>
      ),
    },
    {
      title: '首次发现时间',
      dataIndex: 'first_found_date',
      key: 'first_found_date',
      render: (date: string | undefined) => formatDate(date),
    },
    {
      title: '最近发现时间',
      dataIndex: 'latest_found_date',
      key: 'latest_found_date',
      render: (date: string | undefined) => formatDate(date),
    },
    {
      title: '负责人',
      dataIndex: 'responsible_person',
      key: 'responsible_person',
      render: (text: string | null) => text || '未分配',
    },
    {
      title: '部门',
      dataIndex: 'department',
      key: 'department',
      render: (text: string | null) => text || '未分配',
    },
    {
      title: 'CVSS评分',
      dataIndex: 'cvss_score',
      key: 'cvss_score',
      render: (score: number | null) => {
        if (score === null) return '未评分';
        
        let color = 'green';
        if (score >= 7.0) color = 'red';
        else if (score >= 4.0) color = 'orange';
        
        return <Tag color={color}>{score.toFixed(1)}</Tag>;
      },
    },
    {
      title: 'VPR评分',
      dataIndex: 'vpr_score',
      key: 'vpr_score',
      render: (score: number | null) => {
        if (score === null) return '未评分';
        return <span>{score.toFixed(1)}</span>;
      },
    },
    {
      title: '影响资产',
      key: 'affected_assets',
      dataIndex: 'affected_assets',
      render: (assets: Asset[]) => (
        <span>{assets.length > 0 ? `${assets.length}个资产` : '无'}</span>
      ),
    },
    {
      title: '操作',
      key: 'action',
      render: (_: any, record: Vulnerability) => (
        <Space size="small">
          <Button type="link" size="small" onClick={() => goToDetail(record.id)}>
            详情
          </Button>
          <AIChatTrigger 
            buttonText="AI分析" 
            data={record} 
            buttonType="link" 
            size="small" 
            placement="list"
            icon={<RobotOutlined />}
          />
        </Space>
      ),
    },
  ];

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <Title level={2}>漏洞管理</Title>
        <Button type="primary" icon={<PlusOutlined />} onClick={handleAddVulnerability}>
          添加漏洞
        </Button>
      </div>

      <Card className="mb-4">
        <div className="flex flex-wrap gap-4 mb-4">
          <Input
            placeholder="搜索漏洞名称、CVE、描述等"
            value={searchText}
            onChange={e => setSearchText(e.target.value)}
            style={{ width: 300 }}
            prefix={<SearchOutlined />}
            allowClear
          />
          
          <Select
            placeholder="风险等级"
            style={{ width: 120 }}
            value={riskLevelFilter || undefined}
            onChange={value => setRiskLevelFilter(value)}
            allowClear
          >
            <Option value="高">高</Option>
            <Option value="中">中</Option>
            <Option value="低">低</Option>
          </Select>
          
          <Select
            placeholder="状态"
            style={{ width: 120 }}
            value={statusFilter || undefined}
            onChange={value => setStatusFilter(value)}
            allowClear
          >
            <Option value="待修复">待修复</Option>
            <Option value="修复中">修复中</Option>
            <Option value="已修复">已修复</Option>
            <Option value="已验证">已验证</Option>
          </Select>
          
          <Select
            placeholder="漏洞类型"
            style={{ width: 150 }}
            value={typeFilter || undefined}
            onChange={value => setTypeFilter(value)}
            allowClear
          >
            <Option value="SQL注入">SQL注入</Option>
            <Option value="XSS">XSS</Option>
            <Option value="CSRF">CSRF</Option>
            <Option value="远程代码执行">远程代码执行</Option>
            <Option value="权限提升">权限提升</Option>
            <Option value="信息泄露">信息泄露</Option>
          </Select>
          
          <Select
            placeholder="优先级"
            style={{ width: 120 }}
            value={priorityFilter || undefined}
            onChange={value => setPriorityFilter(value)}
            allowClear
          >
            <Option value="高">高</Option>
            <Option value="中">中</Option>
            <Option value="低">低</Option>
          </Select>
          
          <Select
            placeholder="部门"
            style={{ width: 150 }}
            value={departmentFilter || undefined}
            onChange={value => setDepartmentFilter(value)}
            allowClear
          >
            <Option value="技术部">技术部</Option>
            <Option value="安全部">安全部</Option>
            <Option value="运维部">运维部</Option>
            <Option value="开发部">开发部</Option>
          </Select>
        </div>
        
        <div className="flex flex-wrap gap-4">
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <span style={{ marginRight: '8px' }}>VPR评分：</span>
            <Input
              placeholder="最小值"
              style={{ width: 80 }}
              value={vprMinFilter !== null ? vprMinFilter.toString() : ''}
              onChange={e => handleVprMinChange(e.target.value)}
              allowClear
            />
            <span style={{ margin: '0 8px' }}>-</span>
            <Input
              placeholder="最大值"
              style={{ width: 80 }}
              value={vprMaxFilter !== null ? vprMaxFilter.toString() : ''}
              onChange={e => handleVprMaxChange(e.target.value)}
              allowClear
            />
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <span style={{ marginRight: '8px' }}>首次发现：</span>
            <RangePicker 
              showTime
              value={firstFoundDateRange}
              onChange={handleFirstFoundDateChange}
            />
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <span style={{ marginRight: '8px' }}>最近发现：</span>
            <RangePicker 
              showTime
              value={latestFoundDateRange}
              onChange={handleLatestFoundDateChange}
            />
          </div>
        </div>
      </Card>

      <Table
        columns={columns}
        dataSource={filteredVulnerabilities}
        rowKey="id"
        loading={loading}
        pagination={{ pageSize: 10 }}
        scroll={{ x: 1500 }}
      />

      {/* 添加漏洞模态窗口 */}
      <Modal
        title="添加新漏洞"
        open={isModalVisible}
        onCancel={handleCancel}
        footer={null}
        maskClosable={false}
        width={800}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{
            risk_level: '中',
            priority: '中',
            affected_assets: [],
          }}
        >
          {/* 基本信息 */}
          <Typography.Title level={5}>基本信息</Typography.Title>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Form.Item
              name="name"
              label="漏洞名称"
              rules={[{ required: true, message: '请输入漏洞名称' }]}
            >
              <Input placeholder="输入漏洞名称" />
            </Form.Item>
            
            <Form.Item
              name="cve_id"
              label="CVE编号"
            >
              <Input placeholder="输入CVE编号(如有)" />
            </Form.Item>
            
            <Form.Item
              name="vulnerability_type"
              label="漏洞类型"
            >
              <Select placeholder="选择漏洞类型">
                <Option value="SQL注入">SQL注入</Option>
                <Option value="XSS">XSS</Option>
                <Option value="CSRF">CSRF</Option>
                <Option value="远程代码执行">远程代码执行</Option>
                <Option value="权限提升">权限提升</Option>
                <Option value="信息泄露">信息泄露</Option>
                <Option value="其他">其他</Option>
              </Select>
            </Form.Item>
            
            <Form.Item
              name="vulnerability_url"
              label="漏洞地址"
            >
              <Input placeholder="输入漏洞URL或路径" />
            </Form.Item>
            
            <Form.Item
              name="risk_level"
              label="风险等级"
              rules={[{ required: true, message: '请选择风险等级' }]}
            >
              <Select>
                <Option value="高">高</Option>
                <Option value="中">中</Option>
                <Option value="低">低</Option>
              </Select>
            </Form.Item>
            
            <Form.Item
              name="priority"
              label="优先级"
            >
              <Select placeholder="选择优先级">
                <Option value="高">高</Option>
                <Option value="中">中</Option>
                <Option value="低">低</Option>
              </Select>
            </Form.Item>
            
            <Form.Item
              name="cvss_score"
              label="CVSS评分"
            >
              <Input type="number" min="0" max="10" step="0.1" placeholder="0-10" />
            </Form.Item>
            
            <Form.Item
              name="vpr_score"
              label="VPR评分"
            >
              <Input type="number" min="0" step="0.1" placeholder="输入VPR评分" />
            </Form.Item>
            
            <Form.Item
              name="first_found_date"
              label="首次发现时间"
            >
              <DatePicker 
                showTime 
                format="YYYY-MM-DD HH:mm:ss"
                placeholder="选择首次发现时间" 
                style={{ width: '100%' }} 
              />
            </Form.Item>
            
            <Form.Item
              name="latest_found_date"
              label="最近发现时间"
            >
              <DatePicker 
                showTime 
                format="YYYY-MM-DD HH:mm:ss"
                placeholder="选择最近发现时间" 
                style={{ width: '100%' }} 
              />
            </Form.Item>
            
            <Form.Item
              name="responsible_person"
              label="负责人"
            >
              <Input placeholder="输入负责人姓名" />
            </Form.Item>
            
            <Form.Item
              name="department"
              label="归属部门"
            >
              <Select placeholder="选择部门">
                <Option value="技术部">技术部</Option>
                <Option value="安全部">安全部</Option>
                <Option value="运维部">运维部</Option>
                <Option value="开发部">开发部</Option>
              </Select>
            </Form.Item>
            
            <Form.Item
              name="fix_time_hours"
              label="修复时长(小时)"
            >
              <Input type="number" min="0" placeholder="预计修复所需时间" />
            </Form.Item>
          </div>
          
          {/* 详细描述 */}
          <Typography.Title level={5} style={{ marginTop: '20px' }}>详细描述</Typography.Title>
          <Form.Item
            name="description"
            label="漏洞描述"
            rules={[{ required: true, message: '请输入漏洞描述' }]}
          >
            <TextArea rows={4} placeholder="输入漏洞详细描述" />
          </Form.Item>
          
          <Form.Item
            name="remediation_steps"
            label="修复步骤"
          >
            <TextArea rows={3} placeholder="输入修复步骤(可选)" />
          </Form.Item>
          
          <Form.Item
            name="impact_details"
            label="漏洞危害"
          >
            <TextArea rows={3} placeholder="描述漏洞可能造成的危害" />
          </Form.Item>
          
          <Form.Item
            name="affected_components"
            label="影响组件"
          >
            <Input placeholder="输入受影响的组件名称" />
          </Form.Item>
          
          <Form.Item>
            <div className="flex justify-end">
              <Button style={{ marginRight: 8 }} onClick={handleCancel}>
                取消
              </Button>
              <Button type="primary" htmlType="submit" loading={submitLoading}>
                提交
              </Button>
            </div>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default VulnerabilityList;