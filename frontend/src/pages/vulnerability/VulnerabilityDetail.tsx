import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { Card, Descriptions, Tag, Divider, Typography, Spin, Alert, Button, Space, Tabs, Table, Empty, Modal, Transfer, message } from 'antd';
import type { TransferDirection } from 'antd/es/transfer';
import { 
  SecurityScanOutlined, 
  BugOutlined, 
  RobotOutlined, 
  ToolOutlined, 
  LineChartOutlined, 
  FileTextOutlined, 
  UserOutlined, 
  TeamOutlined,
  LinkOutlined,
  BarChartOutlined
} from '@ant-design/icons';
import AIChatTrigger from '../../components/ai/AIChatTrigger';
import RiskAssessmentModal from '../../components/ai/RiskAssessmentModal';
import vulnerabilityService from '../../services/vulnerabilityService';
import { getAssets } from '../../services/assetService';
import { Asset as FullAsset } from '../../types/asset';

const { Title, Paragraph } = Typography;
const { TabPane } = Tabs;

interface Asset {
  id: number;
  name: string;
  ip: string | null;
  type: string;
  address?: string;
}

interface Vulnerability {
  id: number;
  name: string;
  cve_id: string | null;
  risk_level: string;
  description: string;
  affected_assets: Asset[];
  discovery_date: string;
  status: string;
  remediation_steps: string | null;
  
  // 新增字段
  vulnerability_type: string | null;
  vulnerability_url: string | null;
  responsible_person: string | null;
  department: string | null;
  first_found_date: string | null;
  latest_found_date: string | null;
  cvss_score: number | null;
  vpr_score: number | null;
  priority: string | null;
  fix_time_hours: number | null;
  source: string | null;
  
  // 详情字段
  impact_details: string | null;
  reproduction_steps: string | null;
  affected_components: string | null;
  impact_scope: string | null;
  fix_impact: string | null;
  references: string | null;
}

// 风险等级对应的颜色
const riskLevelColors: Record<string, string> = {
  '紧急': 'magenta',
  '高': 'red',
  '中': 'orange',
  '低': 'green',
};

// 状态对应的颜色
const statusColors: Record<string, string> = {
  '待修复': 'red',
  '修复中': 'orange',
  '已修复': 'green',
  '已验证': 'blue',
};

const VulnerabilityDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [loading, setLoading] = useState(true);
  const [vulnerability, setVulnerability] = useState<Vulnerability | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [assetModalVisible, setAssetModalVisible] = useState(false);
  const [availableAssets, setAvailableAssets] = useState<FullAsset[]>([]);
  const [selectedAssetIds, setSelectedAssetIds] = useState<number[]>([]);
  const [assetsLoading, setAssetsLoading] = useState(false);
  const [linkingAssets, setLinkingAssets] = useState(false);
  const [riskAssessmentModalVisible, setRiskAssessmentModalVisible] = useState(false);

  useEffect(() => {
    const fetchVulnerability = async () => {
      try {
        setLoading(true);
        console.log(`正在获取漏洞详情，ID: ${id}`);
        const data = await vulnerabilityService.getVulnerabilityById(id as string);
        console.log('获取到漏洞详情:', data);
        setVulnerability(data);
        
        // 确保affected_assets为数组并正确解析IDs
        const affectedAssets = data.affected_assets || [];
        console.log('漏洞关联资产:', affectedAssets);
        
        if (affectedAssets.length > 0) {
          const assetIds = affectedAssets.map((asset: Asset) => asset.id);
          console.log('设置已选资产IDs:', assetIds);
          setSelectedAssetIds(assetIds);
        } else {
          console.log('无关联资产，清空选择');
          setSelectedAssetIds([]);
        }
      } catch (err) {
        setError('获取漏洞详情时出错，请稍后重试');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchVulnerability();
    }
  }, [id]);

  // 添加强制刷新函数
  const refreshVulnerabilityData = async () => {
    if (!id) return;
    
    try {
      setLoading(true);
      console.log(`[强制刷新] 正在重新获取漏洞详情，ID: ${id}`);
      const data = await vulnerabilityService.getVulnerabilityById(id as string);
      console.log('[强制刷新] 获取到漏洞详情:', data);
      setVulnerability(data);
      
      // 更新已选资产IDs
      const affectedAssets = data.affected_assets || [];
      console.log('[强制刷新] 漏洞关联资产:', affectedAssets);
      
      if (affectedAssets.length > 0) {
        const assetIds = affectedAssets.map((asset: Asset) => asset.id);
        console.log('[强制刷新] 设置已选资产IDs:', assetIds);
        setSelectedAssetIds(assetIds);
      } else {
        console.log('[强制刷新] 无关联资产，清空选择');
        setSelectedAssetIds([]);
      }
    } catch (err) {
      console.error('[强制刷新] 出错:', err);
      message.error('刷新数据失败');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Spin size="large" tip="加载中..." />
      </div>
    );
  }

  if (error || !vulnerability) {
    return (
      <Alert
        message="错误"
        description={error || '未找到漏洞信息'}
        type="error"
        showIcon
      />
    );
  }

  // 格式化日期显示
  const formatDate = (dateStr: string | null) => {
    if (!dateStr) return '未知';
    return new Date(dateStr).toLocaleString();
  };

  // 资产表格列定义
  const assetColumns = [
    {
      title: 'ID',
      dataIndex: 'id',
      key: 'id',
      width: 60
    },
    {
      title: '资产名称',
      dataIndex: 'name',
      key: 'name',
      render: (text: string, record: Asset) => (
        <Link to={`/assets/${record.id}`}>{text}</Link>
      )
    },
    {
      title: 'IP地址',
      dataIndex: 'ip',
      key: 'ip',
      render: (text: string | null) => text || '无IP'
    },
    {
      title: '类型',
      dataIndex: 'type',
      key: 'type'
    }
  ];

  // 加载所有资产
  const loadAssets = async () => {
    setAssetsLoading(true);
    try {
      const assets = await getAssets();
      setAvailableAssets(assets);
    } catch (error) {
      console.error('加载资产列表失败', error);
      message.error('加载资产列表失败');
    } finally {
      setAssetsLoading(false);
    }
  };

  // 打开资产关联模态框
  const handleManageAssets = () => {
    loadAssets();
    setAssetModalVisible(true);
  };

  // 保存资产关联
  const handleSaveAssetLinks = async () => {
    if (!vulnerability) return;

    setLinkingAssets(true);
    try {
      console.log('准备关联资产，选择的ID:', selectedAssetIds);
      console.log('准备发送数据:', { affected_assets: selectedAssetIds });
      
      // 确保发送正确的数据结构
      const response = await vulnerabilityService.updateVulnerability(
        vulnerability.id,
        { affected_assets: selectedAssetIds }
      );
      
      console.log('资产关联API响应:', response);
      
      message.success('关联资产成功');
      setAssetModalVisible(false);
      
      // 强制刷新数据
      await refreshVulnerabilityData();
    } catch (error) {
      console.error('关联资产失败:', error);
      message.error('关联资产失败，请重试');
    } finally {
      setLinkingAssets(false);
    }
  };
  
  // Transfer组件变更处理
  const handleTransferChange = (
    targetKeys: any, 
    direction: TransferDirection,
    moveKeys: any
  ) => {
    setSelectedAssetIds(targetKeys.map((key: string) => parseInt(String(key))));
  };

  // 处理评估结果应用
  const handleApplyAssessmentResults = async (vprScore: number, priority: string) => {
    try {
      const updatedVulnerability = {
        ...vulnerability,
        vpr_score: vprScore,
        priority: priority
      };
      setVulnerability(updatedVulnerability);
      message.success('风险评估结果已应用');
    } catch (error) {
      message.error('更新风险评估结果失败');
    }
  };

  return (
    <div className="vulnerability-detail">
      <div className="flex justify-between items-center mb-4">
        <Title level={2} className="m-0 flex items-center">
          <BugOutlined className="mr-2" />
          {vulnerability.name}
        </Title>
        
        <Space>
          {/* 添加风险评估按钮 */}
          <Button 
            icon={<BarChartOutlined />} 
            onClick={() => setRiskAssessmentModalVisible(true)}
            type="default"
          >
            AI风险评估
          </Button>
          
          {/* AI助手触发按钮 */}
          <AIChatTrigger 
            buttonText="获取修复建议" 
            tooltipText="使用AI获取针对该漏洞的修复建议"
            data={vulnerability}
            buttonType="primary"
          />
        </Space>
      </div>

      <Card>
        <Descriptions bordered column={2}>
          <Descriptions.Item label="风险等级">
            <Tag color={riskLevelColors[vulnerability.risk_level] || 'default'}>
              {vulnerability.risk_level}
            </Tag>
          </Descriptions.Item>
          <Descriptions.Item label="状态">
            <Tag color={statusColors[vulnerability.status] || 'default'}>
              {vulnerability.status}
            </Tag>
          </Descriptions.Item>
          <Descriptions.Item label="CVE编号">
            {vulnerability.cve_id || '无'}
          </Descriptions.Item>
          <Descriptions.Item label="漏洞类型">
            {vulnerability.vulnerability_type || '未分类'}
          </Descriptions.Item>
          <Descriptions.Item label="优先级">
            {vulnerability.priority ? (
              <Tag color={riskLevelColors[vulnerability.priority] || 'default'}>
                {vulnerability.priority}
              </Tag>
            ) : '未设置'}
          </Descriptions.Item>
          <Descriptions.Item label="发现日期">
            {formatDate(vulnerability.discovery_date)}
          </Descriptions.Item>
          <Descriptions.Item label="负责人">
            <UserOutlined /> {vulnerability.responsible_person || '未分配'}
          </Descriptions.Item>
          <Descriptions.Item label="所属部门">
            <TeamOutlined /> {vulnerability.department || '未分配'}
          </Descriptions.Item>
          <Descriptions.Item label="漏洞地址" span={2}>
            {vulnerability.vulnerability_url || '无'}
          </Descriptions.Item>
        </Descriptions>

        <Tabs defaultActiveKey="details">
          <TabPane
            tab={
              <span>
                <FileTextOutlined />
                基本信息
              </span>
            }
            key="details"
          >
            <div className="grid grid-cols-1 gap-4 mt-4">
              <Card title="漏洞描述" className="md:col-span-2">
                <Descriptions column={1} bordered size="small">
                  <Descriptions.Item>
                    {vulnerability.description || '暂无漏洞描述信息'}
                  </Descriptions.Item>
                </Descriptions>
              </Card>
            </div>
          </TabPane>
          
          <TabPane
            tab={
              <span>
                <SecurityScanOutlined />
                关联资产 {vulnerability?.affected_assets?.length ? `(${vulnerability.affected_assets.length})` : ''}
              </span>
            }
            key="assets"
          >
            <Card>
              {vulnerability?.affected_assets && vulnerability.affected_assets.length > 0 ? (
                <Table 
                  dataSource={vulnerability.affected_assets} 
                  columns={assetColumns} 
                  rowKey="id"
                  pagination={false}
                />
              ) : (
                <Empty description="暂无关联资产" />
              )}
              <div style={{ marginTop: 16, display: 'flex', justifyContent: 'flex-end' }}>
                <Button
                  type="primary"
                  icon={<LinkOutlined />}
                  onClick={handleManageAssets}
                >
                  管理资产关联
                </Button>
              </div>
            </Card>
          </TabPane>
          
          <TabPane 
            tab={<span><ToolOutlined /> 修复信息</span>}
            key="remediation"
          >
            <Card title="修复方案" className="mb-4">
              {vulnerability.remediation_steps ? (
                <Paragraph>{vulnerability.remediation_steps}</Paragraph>
              ) : (
                <Space direction="vertical" className="w-full">
                  <Paragraph className="text-gray-500">当前无修复方案</Paragraph>
                  <AIChatTrigger 
                    buttonText="询问AI获取修复建议" 
                    icon={<RobotOutlined />}
                    data={vulnerability}
                    buttonType="dashed"
                    size="small"
                  />
                </Space>
              )}
            </Card>
            
            <Card title="修复影响">
              {vulnerability.fix_impact ? (
                <Paragraph>{vulnerability.fix_impact}</Paragraph>
              ) : (
                <Paragraph className="text-gray-500">暂无修复影响信息</Paragraph>
              )}
            </Card>
            
            {vulnerability.fix_time_hours && (
              <div className="mt-4">
                <Tag color="blue">预计修复时长: {vulnerability.fix_time_hours} 小时</Tag>
              </div>
            )}
          </TabPane>
          
          <TabPane 
            tab={<span><LineChartOutlined /> 风险评估</span>}
            key="risk"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card title="CVSS评分">
                {vulnerability.cvss_score !== null ? (
                  <>
                    <div className="text-2xl font-bold mb-2">{vulnerability.cvss_score.toFixed(1)}/10</div>
                    <div>
                      {vulnerability.cvss_score >= 7.0 && <Tag color="red">严重</Tag>}
                      {vulnerability.cvss_score >= 4.0 && vulnerability.cvss_score < 7.0 && <Tag color="orange">中等</Tag>}
                      {vulnerability.cvss_score < 4.0 && <Tag color="green">低危</Tag>}
                    </div>
                  </>
                ) : (
                  <Paragraph className="text-gray-500">暂无CVSS评分</Paragraph>
                )}
              </Card>
              
              <Card title="VPR评分">
                {vulnerability.vpr_score !== null ? (
                  <>
                    <div className="text-2xl font-bold mb-2">{vulnerability.vpr_score.toFixed(1)}/10</div>
                    <div>
                      {vulnerability.vpr_score >= 8.5 && <Tag color="magenta">紧急</Tag>}
                      {vulnerability.vpr_score >= 6.5 && vulnerability.vpr_score < 8.5 && <Tag color="red">严重</Tag>}
                      {vulnerability.vpr_score >= 4.0 && vulnerability.vpr_score < 6.5 && <Tag color="orange">中等</Tag>}
                      {vulnerability.vpr_score < 4.0 && <Tag color="green">低危</Tag>}
                    </div>
                  </>
                ) : (
                  <Paragraph className="text-gray-500">暂无VPR评分</Paragraph>
                )}
              </Card>
            </div>
            
            <Card title="漏洞危害" className="mt-4">
              {vulnerability.impact_details ? (
                <Paragraph>{vulnerability.impact_details}</Paragraph>
              ) : (
                <Paragraph className="text-gray-500">暂无危害详情</Paragraph>
              )}
            </Card>
            
            <Card title="影响范围" className="mt-4">
              {vulnerability.impact_scope ? (
                <Paragraph>{vulnerability.impact_scope}</Paragraph>
              ) : (
                <Paragraph className="text-gray-500">暂无影响范围信息</Paragraph>
              )}
            </Card>
          </TabPane>
          
          <TabPane 
            tab={<span><FileTextOutlined /> 技术详情</span>}
            key="technical"
          >
            <Card title="漏洞复现步骤" className="mb-4">
              {vulnerability.reproduction_steps ? (
                <Paragraph>
                  <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit' }}>
                    {vulnerability.reproduction_steps}
                  </pre>
                </Paragraph>
              ) : (
                <Paragraph className="text-gray-500">暂无复现步骤</Paragraph>
              )}
            </Card>
            
            <Card title="影响组件" className="mb-4">
              {vulnerability.affected_components ? (
                <Paragraph>{vulnerability.affected_components}</Paragraph>
              ) : (
                <Paragraph className="text-gray-500">暂无影响组件信息</Paragraph>
              )}
            </Card>
            
            <Card title="参考资料">
              {vulnerability.references ? (
                <Paragraph>
                  <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit' }}>
                    {vulnerability.references}
                  </pre>
                </Paragraph>
              ) : (
                <Paragraph className="text-gray-500">暂无参考资料</Paragraph>
              )}
            </Card>
          </TabPane>
          
          <TabPane 
            tab={<span><UserOutlined /> 发现历史</span>}
            key="history"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card title="首次发现时间">
                {vulnerability.first_found_date ? (
                  <div className="text-xl">{formatDate(vulnerability.first_found_date)}</div>
                ) : (
                  <Paragraph className="text-gray-500">未知首次发现时间</Paragraph>
                )}
              </Card>
              
              <Card title="最近发现时间">
                {vulnerability.latest_found_date ? (
                  <div className="text-xl">{formatDate(vulnerability.latest_found_date)}</div>
                ) : (
                  <Paragraph className="text-gray-500">未知最近发现时间</Paragraph>
                )}
              </Card>
            </div>
          </TabPane>
        </Tabs>
      </Card>

      {/* 资产关联模态框 */}
      <Modal
        title="管理关联资产"
        open={assetModalVisible}
        onOk={handleSaveAssetLinks}
        onCancel={() => setAssetModalVisible(false)}
        confirmLoading={linkingAssets}
        width={800}
      >
        <Spin spinning={assetsLoading}>
          <div className="mb-4">
            <p>选择要与此漏洞关联的资产。当前已选择 {selectedAssetIds.length} 个资产。</p>
            <p className="text-gray-500">当前选中的资产IDs: {selectedAssetIds.join(', ')}</p>
          </div>
          <Transfer<{
            key: string;
            title: string;
            description: string;
          }>
            dataSource={availableAssets.map((asset: FullAsset) => ({
              key: asset.id.toString(),
              title: `${asset.name} (${asset.address || '无地址'}) - ID: ${asset.id}`,
              description: asset.type,
            }))}
            titles={['可用资产', '已关联资产']}
            targetKeys={selectedAssetIds.map(id => id.toString())}
            onChange={(newTargetKeys) => {
              // 清晰打印转换前后的数据，方便调试
              console.log('Transfer原始选择的keys:', newTargetKeys);
              
              try {
                // 明确的类型转换
                const newIds = newTargetKeys.map(key => Number(key));
                console.log('转换后的资产IDs:', newIds);
                
                // 更新状态
                setSelectedAssetIds(newIds);
              } catch (err) {
                console.error('资产ID转换错误:', err);
              }
            }}
            render={item => item.title}
            listStyle={{ height: 400, overflow: 'auto' }}
            showSearch
            filterOption={(inputValue, item) => 
              item.title.toLowerCase().indexOf(inputValue.toLowerCase()) !== -1 ||
              item.description.toLowerCase().indexOf(inputValue.toLowerCase()) !== -1
            }
          />
        </Spin>
      </Modal>

      {/* 风险评估模态框 */}
      <RiskAssessmentModal
        visible={riskAssessmentModalVisible}
        vulnerability={vulnerability}
        onClose={() => setRiskAssessmentModalVisible(false)}
        onApplyResults={handleApplyAssessmentResults}
      />
    </div>
  );
};

export default VulnerabilityDetail; 