import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Card, Descriptions, Tag, Divider, Typography, Spin, Alert, Button, Space } from 'antd';
import { SecurityScanOutlined, BugOutlined, RobotOutlined, ToolOutlined } from '@ant-design/icons';
import AIChatTrigger from '../../components/ai/AIChatTrigger';
import vulnerabilityService from '../../services/vulnerabilityService';

const { Title, Paragraph } = Typography;

interface Asset {
  id: number;
  name: string;
  ip: string | null;
  type: string;
}

interface Vulnerability {
  id: number;
  name: string;
  cve_id: string | null;
  risk_level: string;
  description: string;
  affected_assets: Asset[];
  discovery_date: string;
  status: string;
  remediation_steps: string | null;
}

// 风险等级对应的颜色
const riskLevelColors: Record<string, string> = {
  '高': 'red',
  '中': 'orange',
  '低': 'green',
};

// 状态对应的颜色
const statusColors: Record<string, string> = {
  '待修复': 'red',
  '修复中': 'orange',
  '已修复': 'green',
  '已验证': 'blue',
};

const VulnerabilityDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [loading, setLoading] = useState(true);
  const [vulnerability, setVulnerability] = useState<Vulnerability | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchVulnerability = async () => {
      try {
        setLoading(true);
        console.log(`正在获取漏洞详情，ID: ${id}`);
        const data = await vulnerabilityService.getVulnerabilityById(id as string);
        console.log('获取到漏洞详情:', data);
        setVulnerability(data);
      } catch (err) {
        setError('获取漏洞详情时出错，请稍后重试');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchVulnerability();
    }
  }, [id]);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Spin size="large" tip="加载中..." />
      </div>
    );
  }

  if (error || !vulnerability) {
    return (
      <Alert
        message="错误"
        description={error || '未找到漏洞信息'}
        type="error"
        showIcon
      />
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <Title level={2} className="m-0 flex items-center">
          <BugOutlined className="mr-2" />
          {vulnerability.name}
        </Title>
        
        {/* AI助手触发按钮 */}
        <AIChatTrigger 
          buttonText="获取修复建议" 
          tooltipText="使用AI获取针对该漏洞的修复建议"
          data={vulnerability}
          buttonType="primary"
        />
      </div>

      <Card>
        <Descriptions bordered column={2}>
          <Descriptions.Item label="风险等级">
            <Tag color={riskLevelColors[vulnerability.risk_level] || 'default'}>
              {vulnerability.risk_level}
            </Tag>
          </Descriptions.Item>
          <Descriptions.Item label="状态">
            <Tag color={statusColors[vulnerability.status] || 'default'}>
              {vulnerability.status}
            </Tag>
          </Descriptions.Item>
          <Descriptions.Item label="CVE编号">
            {vulnerability.cve_id || '无'}
          </Descriptions.Item>
          <Descriptions.Item label="发现日期">
            {new Date(vulnerability.discovery_date).toLocaleDateString()}
          </Descriptions.Item>
          <Descriptions.Item label="漏洞描述" span={2}>
            {vulnerability.description}
          </Descriptions.Item>
        </Descriptions>

        <Divider orientation="left">
          <SecurityScanOutlined /> 影响资产
        </Divider>
        
        {vulnerability.affected_assets.length > 0 ? (
          <div>
            {vulnerability.affected_assets.map((asset) => (
              <Tag key={asset.id} className="mb-2 mr-2 p-1">
                {asset.name} {asset.ip && `(${asset.ip})`} - {asset.type}
              </Tag>
            ))}
          </div>
        ) : (
          <Paragraph className="text-gray-500">无影响资产信息</Paragraph>
        )}

        <Divider orientation="left">
          <ToolOutlined /> 修复方案
        </Divider>
        
        {vulnerability.remediation_steps ? (
          <Paragraph>{vulnerability.remediation_steps}</Paragraph>
        ) : (
          <Space direction="vertical" className="w-full">
            <Paragraph className="text-gray-500">当前无修复方案</Paragraph>
            <AIChatTrigger 
              buttonText="询问AI获取修复建议" 
              icon={<RobotOutlined />}
              data={vulnerability}
              buttonType="dashed"
              size="small"
            />
          </Space>
        )}
      </Card>
    </div>
  );
};

export default VulnerabilityDetail; 